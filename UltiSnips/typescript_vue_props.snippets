extends typescript

snippet Propbool "vue @Prop with required Boolean " b
  @Prop({
    type: Boolean,
    required: true
  })
  private readonly propName!: boolean

endsnippet

snippet Propbooldef "vue @Prop with default Boolean" b
  @Prop({
    type: Boolean,
    default: false
  })
  private readonly propName!:boolean

endsnippet

snippet Propnum "vue @Prop with required Number " b
  @Prop({
    type: Number,
    required: true
  })
  private readonly propName!: number

endsnippet

snippet Propnumdef "vue @Prop with default Number" b
  @Prop({
    type: Number,
    default: 0
  })
  private readonly propName!: number

endsnippet

snippet Propnumval "vue @Prop with Number validator" b
  @Prop({
    type: Number,
    required: false,
    default: 0,
    validator(value) {
      const validValues = [
        // TODO
      ]
      return validValues.include(value)
    },
  })
  private readonly propName!: number

endsnippet


snippet Propstr "vue @Prop with required String " b
  @Prop({
    type: String,
    required: true
  })
  private readonly propName!: string

endsnippet

snippet Propstrdef "vue @Prop with default String" b
  @Prop({
    type: String,
    default: 'default'
  })
  private readonly propName!:string

endsnippet

snippet Propstrval "vue @Prop with String validator" b
  @Prop({
    type: String,
    required: false,
    default: 'default',
    validator(value) {
      const validValues = [
        // TODO
      ]
      return validValues.include(value)
    },
  })
  private readonly propName!:string

endsnippet

snippet Proparr "vue @Prop with required Array" b
  @Prop({
    type: Array,
    required: true,
  })
  private readonly propName!: any[]

endsnippet

snippet Proparrdef "vue @Prop with default Array" b
  @Prop({
    type: Array,
    default() {
      const arr = [
        // TODO
      ]
      return arr
    }
  })
  private readonly propName!: any[]

endsnippet

snippet Proparrval "vue @Prop with Array validator" b
  @Prop({
    type: Array,
    required: false,
    default() {
      const arr = [
        // TODO
      ]
      return arr
    },
    validator(arr) {
      return arr.every((item) => {
        // TODO
      })
    },
  })
  private readonly propName!: any[]

endsnippet

snippet Propobj "vue @Prop with required Object" b
  @Prop({
    type: Object,
    required: true,
  })
  private readonly propName!: object

endsnippet

snippet Propobjdef "vue @Prop with default Object" b
  @Prop({
    type: Object,
    default: () => {
      return {
        // TODO
      }
    }
  })
  private readonly propName!: object

endsnippet

snippet Propobjval "vue @Prop with Object validator" b
  @Prop({
    type: Object,
    default: () => {
      return {
        // TODO
      }
    },
    validator(obj) {
      // TODO
    },
  })
  private readonly propName!: object

endsnippet




